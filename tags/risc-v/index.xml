<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>RISC-V on hhdx's blog</title><link>https://hhdx.xyz/tags/risc-v/</link><description>Recent content in RISC-V on hhdx's blog</description><generator>Hugo -- 0.138.0</generator><language>en</language><lastBuildDate>Sun, 13 Aug 2023 14:40:28 +0800</lastBuildDate><atom:link href="https://hhdx.xyz/tags/risc-v/index.xml" rel="self" type="application/rss+xml"/><item><title>RISC-V 汇编概览</title><link>https://hhdx.xyz/post/riscv-assembly-intro/</link><pubDate>Sun, 13 Aug 2023 14:40:28 +0800</pubDate><guid>https://hhdx.xyz/post/riscv-assembly-intro/</guid><description>&lt;p>最近尝试跟着 &lt;a href="http://rcore-os.cn/rCore-Tutorial-Book-v3/index.html">rCore Tutorial&lt;/a> 教程，使用 Rust 实现基于 RISC-V 架构的类 Unix 内核，从而在深化 OS 理解的目标上，同时入门学习 Rust 语言和 RISC-V 基础。虽然说是 RISC-V 比 x86 简单很多，但是直接跟着教程来同时学习 RISC-V 还是有点不够，经常前面记得一点零星的汇编，看到后面的代码就忘了是怎么回事了。所以尝试来整理一下 RISC-V 的汇编，希望能让看到的小伙伴快速的入门一下。本文将以 64 位为例介绍汇编语言。&lt;/p></description></item></channel></rss>